install.packages("KernSmooth")
source('D:/R language/getting&Cleaning/week3quiz.R', echo=TRUE)
View(data)
source('D:/R language/getting&Cleaning/week3quiz.R', echo=TRUE)
source('D:/R language/getting&Cleaning/week3quiz.R', encoding = 'UTF-8', echo=TRUE)
source('D:/R language/getting&Cleaning/week3quiz.R', echo=TRUE)
View(data2)
source('D:/R language/getting&Cleaning/week3quiz.R', echo=TRUE)
source('D:/R language/getting&Cleaning/week3quiz.R', echo=TRUE)
install.packages("jpeg")
library(jpeg)
?readJPEG
img <- readJPEG("D:\\R\ language\\getting&Cleaning\\getdata-jeff.jpg",TRUE)
quantile(img,probs = c(0.30,0.80)
n
quantile(img,probs = c(0.30,0.80)
0
temp = quantile(img,probs = c(0.30,0.80)
temp = quantile(img)
temp = quantile(img)
str(temp)
temp = quantile(img,probs = c(0.30,0.80))
str(temp)
dataGDP = read.csv(D:\\R\ language\\getting&Cleaning\\getdata-data-GDP.csv)
dataGDP = read.csv("D:\\R\ language\\getting&Cleaning\\getdata-data-GDP.csv")
dataCountry = read.csv("D:\\R\ language\\getting&Cleaning\\getdata-data-EDSTATS_Country.csv")
View(dataCountry)
View(dataGDP)
dataGDP = read.csv("D:\\R\ language\\getting&Cleaning\\getdata-data-GDP.csv",skip = 4,col.names =c("CountryCode", "Rank", "Economy", "Total"))
dataGDP = read.csv("D:\\R\ language\\getting&Cleaning\\getdata-data-GDP.csv",skip = 4,select = c(1,2,4,5) ,col.names =c("CountryCode", "Rank", "Economy", "Total"))
dataGDP = fread("D:\\R\ language\\getting&Cleaning\\getdata-data-GDP.csv", skip=4, nrows = 190, select = c(1, 2, 4, 5), col.names=c("CountryCode", "Rank", "Economy", "Total"))
library(data.table)
install(data.table)
install.packages("data.table")
install.packages("data.table")
library(data.table)
dataGDP = fread("D:\\R\ language\\getting&Cleaning\\getdata-data-GDP.csv", skip=4, nrows = 190, select = c(1, 2, 4, 5), col.names=c("CountryCode", "Rank", "Economy", "Total"))
mergedData = merge(dataGDP,dataCountry,by = "CountryCode")
View(mergedData)
?arrange
??arrange
sorted = mergedData[with(mergedData,order(-Rank))]
View(sorted)
mean(sorted[sorted$Income.Group == "High income: OECD",sorted$Rank]
)
mean(sorted[sorted$Income.Group == "High income: OECD",]sorted$Rank)
mean(sorted[sorted$Income.Group == "High income: OECD",]$Rank)
?cut
?cut2
sorted$RankGroups =  cut(sorted$Rank,breaks = 5)
table(sorted$RankGroups,sorted$Income.Group)
data(kobe_basket)
library(statsr)
library(dplyr)
library(statsr)
library(ggplot2)
data("kobe_basket")
str(kobe_basket)
View(kobe_basket)
kobe_streak <- calc_streak(kobe_basket$shot)
library(statsr)
library(dplyr)
library(ggplot2)
data("kobe_basket")
kobe_streak <- calc_streak(kobe_basket$shot)
View(kobe_streak)
ggplot(data = kobe_streak, aes(x = length)) + geom_histogram(binwidth = 1)
boxplot(kobe_streak)
ggplot(data = kobe_streak, aes(x = length)) + geom_histogram(binwidth = 1)
shot_outcomes <- c("H", "M")
sim_basket <- sample(shot_outcomes, size = 1, replace = TRUE)
sim_basket <- sample(shot_outcomes, size = 133, replace = TRUE)
new_strek <- calc_streak(sim_basket)
ggplot(data = new_strek, aes(x = length)) + geom_histogram(binwidth = 1)
1 - pnorm(q = 35,mean = 300000*0.00001 ,sd = sqrt(300000*0.00001*(1-0.00001)))
1 - pnorm(q = 36-0.5,mean = 300000*0.00001 ,sd = sqrt(300000*0.00001*(1-0.00001)))
1 - pnorm(q = 36-0.5,mean = 3000000*0.00001 ,sd = sqrt(3000000*0.00001*(1-0.00001)))
load("brfss2013.RData")
load("selected_nzes2011.Rdata")
load("D:\R language\statisticsWithR\brfss2013.RData")
load("D:/R language/statisticsWithR/brfss2013.RData")
View(brfss2013)
View(brfss2013)
library(statsr)
library(dplyr)
library(ggplot2)
data(ames)
names(ames)
hist(sample_means50)
sample_means10 <- rep(NA, 5000)
sample_means100 <- rep(NA, 5000)
for (i in 1:5000) {
samp <- sample(area, 10)
sample_means10[i] <- mean(samp)
samp <- sample(area, 100)
sample_means100[i] <- mean(samp)
}
par(mfrow = c(3, 1))
xlimits = range(sample_means10)
hist(sample_means10, breaks = 20, xlim = xlimits)
hist(sample_means50, breaks = 20, xlim = xlimits)
hist(sample_means100, breaks = 20, xlim = xlimits)
sample_means50 <- rep(NA, 5000)
for (i in 1:5000) {
samp <- sample(ames$area, 50)
sample_means50[i] <- mean(samp)
}
hist(sample_means50)
sample_means10 <- rep(NA, 5000)
sample_means100 <- rep(NA, 5000)
for (i in 1:5000) {
samp <- sample(ames$area, 10)
sample_means10[i] <- mean(samp)
samp <- sample(ames$area, 100)
sample_means100[i] <- mean(samp)
}
par(mfrow = c(3, 1))
xlimits = range(sample_means10)
hist(sample_means10, breaks = 20, xlim = xlimits)
hist(sample_means50, breaks = 20, xlim = xlimits)
hist(sample_means100, breaks = 20, xlim = xlimits)
install_github("StatsWithR/statsr")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("devtools")
library(devtools)
install_github("StatsWithR/statsr")
install_github("StatsWithR/statsr")
qnorm((1-0.99)/2)
samp_mean <- rep(NA, 50)
samp_sd <- rep(NA, 50)
n <- 60
for(i in 1:50){
samp <- sample(population, n) # obtain a sample of size n = 60 from the population
samp_mean[i] <- mean(samp) # save sample mean in ith element of samp_mean
samp_sd[i] <- sd(samp) # save sample sd in ith element of samp_sd
}
lower <- samp_mean - 1.96 * samp_sd/sqrt(n)
upper <- samp_mean + 1.96 * samp_sd/sqrt(n)
c(lower[1], upper[1])
plot_ci(lower, upper, mean(population))
load(url("http://www.openintro.org/stat/data/ames.RData"))
population <- ames$Gr.Liv.Area
samp <- sample(population, 60)
samp_mean <- rep(NA, 50)
samp_sd <- rep(NA, 50)
n <- 60
for(i in 1:50){
samp <- sample(population, n) # obtain a sample of size n = 60 from the population
samp_mean[i] <- mean(samp) # save sample mean in ith element of samp_mean
samp_sd[i] <- sd(samp) # save sample sd in ith element of samp_sd
}
lower <- samp_mean - 1.96 * samp_sd/sqrt(n)
upper <- samp_mean + 1.96 * samp_sd/sqrt(n)
c(lower[1], upper[1])
plot_ci(lower, upper, mean(population))
pt(2,df=50,lower.tail = FALSE) * 2
pt(2,df=10,lower.tail = FALSE) * 2
library(rattle)
rattle()
library(ratle)
library(rattle)
rattle()
rattle()
head(crs)
crs
crs$kmeans$centers
crs$kmeans$withinss
crs
crs$kmeans$size
crs$kmeans$cluster
crs$dataset
head(crs$dataset)
crs$kmeans$cluster
crs$dataset
crs$kmeans$cluster
crs$kmeans$withinss
crs$kmeans$betweenss/crs$kmeans$totss
crs$kmeans$betweenss
crs$kmeans$totss
crs$kmeans$tot.withinss
crs$kmeans$betweenss/crs$kmeans$totss
crs$kmeans$betweenss/crs$kmeans$totss
crs$kmeans$betweenss/crs$kmeans$totss
crs$kmeans$betweenss/crs$kmeans$totss
crs$kmeans$betweenss/crs$kmeans$totss
crs$kmeans$betweenss/crs$kmeans$totss
crs$kmeans$betweenss/crs$kmeans$totss
crs$kmeans$betweenss/crs$kmeans$totss
source('D:/Business Analytics/Business Analytics using R/Project Data/project.r', echo=TRUE)
source('D:/Business Analytics/Business Analytics using R/Project Data/project.r', echo=TRUE)
View(d1)
View(d2)
View(d3)
View(d1)
View(d1)
head(di)
head(d1)
head(d2)
head(d3)
d2
summary(d1)
train_data = d1[1:200,]
test_data = d1[351:45,]
test_data = d1[351:395,]
train_data = d1[1:350,]
View(train_data)
summary(train_data$age)
processed_train_data <- lapply(train_data["age","Medu","Fedu","traveltime","studytime","failures","famrel","freetime","goout","Dalc","Walc","health","absences"],as.factor)
processed_train_data <- lapply(train_data[c("age","Medu","Fedu","traveltime","studytime","failures","famrel","freetime","goout","Dalc","Walc","health","absences")],as.factor)
